// Generated by CoffeeScript 1.7.1
(function() {
  var app;

  app = angular.module('progressCircle', []);

  app.controller('Main', function($scope, $interval) {
    var increasing;
    $scope.actual = 0.0;
    $scope.expected = 0.5;
    increasing = true;
    return $interval(function() {
      if ($scope.paused) {
        return;
      }
      $scope.actual += increasing ? 0.003 : -0.003;
      if ($scope.actual >= 1.0) {
        $scope.actual = 1.0;
        increasing = false;
      }
      if ($scope.actual <= 0.0) {
        $scope.actual = 0.0;
        return increasing = true;
      }
    }, 50);
  });

  app.service('Color', function() {
    var Color;
    Color = this;
    this.str = function(c) {
      return "rgb(" + (c.r.toFixed(0)) + ", " + (c.g.toFixed(0)) + ", " + (c.b.toFixed(0)) + ")";
    };
    this.blend = function(c1, c2, weight) {
      var w1, w2;
      w1 = Math.max(0.0, Math.min(weight, 1.0));
      w2 = 1.0 - w1;
      return Color.str({
        r: c1.r * w1 + c2.r * w2,
        g: c1.g * w1 + c2.g * w2,
        b: c1.b * w1 + c2.b * w2
      });
    };
    return Color;
  });

  app.directive('progressCircle', function($window, Color) {
    var diameter, link, radius, twoPi;
    radius = 1000;
    diameter = radius * 2;
    twoPi = Math.PI * 2;
    link = function(scope, el, attrs) {
      var arc, canvas, changeText, createArc, fadeColors, resize, svg, text;
      svg = d3.select(el[0]).append('svg').attr('width', diameter).attr('height', diameter).attr('viewBox', "0 0 " + diameter + " " + diameter).attr('preserveAspectRatio', 'xMidyMid');
      canvas = svg.append('g').attr('transform', "translate(" + radius + ", " + radius + ")");
      resize = function() {
        var size;
        size = Math.min(0.9 * $window.innerHeight, el.width());
        return svg.attr('width', size).attr('height', size);
      };
      resize();
      $window.onresize = _.debounce(resize, 200);
      arc = d3.svg.arc().startAngle(0);
      createArc = function(inner, outer, binding, color) {
        var path;
        path = canvas.append('path').attr('class', binding).datum({
          innerRadius: inner,
          outerRadius: outer,
          endAngle: scope[binding] * twoPi
        }).attr('d', arc).style('fill', color());
        return scope.$watch(binding, function(val) {
          return path.attr('d', arc.endAngle(val * twoPi)).style('fill', color());
        });
      };
      fadeColors = function() {
        var bad, difference, good, medium;
        bad = {
          r: 255,
          g: 0,
          b: 0
        };
        medium = {
          r: 255,
          g: 165,
          b: 0
        };
        good = {
          r: 120,
          g: 192,
          b: 0
        };
        difference = scope.expected - scope.actual;
        if (difference > 0.5) {
          return Color.str(bad);
        } else if (difference > 0.25) {
          return Color.blend(bad, medium, 4 * (difference - 0.25));
        } else {
          return Color.blend(medium, good, 4 * difference);
        }
      };
      createArc(radius * 0.9, radius, 'actual', fadeColors);
      createArc(radius * 0.8, radius * 0.86, 'expected', function() {
        return '#c7e596';
      });
      canvas.append('circle').attr('r', radius * 0.7).attr('fill', '#f4f4f4');
      text = canvas.append('text').attr('class', 'percentage').attr('font-family', 'Source Sans Pro').attr('text-anchor', 'middle').attr('font-size', "" + (radius * 0.5) + "px").attr('y', radius * 0.06).attr('x', radius * 0.05);
      changeText = function(val) {
        var percentSize, progressSize;
        progressSize = radius * 0.2;
        percentSize = radius * 0.3;
        return text.text((val * 100).toFixed(0)).append('tspan').attr('font-size', "" + percentSize + "px").text('%').append('tspan').attr('font-size', "" + progressSize + "px").attr('x', 0).attr('y', percentSize).text('Progress');
      };
      changeText(scope.actual);
      return scope.$watch('actual', changeText);
    };
    return {
      link: link,
      scope: {
        expected: '=',
        actual: '='
      }
    };
  });

}).call(this);
